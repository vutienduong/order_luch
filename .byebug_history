c
rs + [['', '', 'TOTAL COST', @presenter[:total_cost].to_s]] + [['', '', 'BUDGET', @presenter[:budget].to_s]]
rs + [['', '', 'TOTAL COST', @presenter[:total_cost].to_s]]
rs
c
content
c
a
c
rs
c
e[1]
e[0]
e.length
e
c
dish.restaurant.name
dish.restaurant
dish.restaurany
count
dish.class
dish.length
count
dish
c
@presenter
@today_orders
@menu
c
order.date.to_date
order.date.class
order.date.date
order.date
c
row(0)
row
c
session[:today_order_id]
session[:user_id]
c
dish_params
@dish
c
restaurant
image_size
c
image_size
restaurant
c
@restaurant = Restaurant.new(restaurant_params)
c
Restaurant.new(restaurant_params)
restaurant_params
c
n
c
n
c
UserHelper::test_helper
test_helper
n
c
MyError::CreateFailError.new @menu.errors.messages.to_s
MyError::CreateFailError
MyError::CreateFailError @menu.errors.messages.to_s
@menu.errors.messages.to_s
@menu.save
c
super(:create_fail, 422, msg)
c
raise MyError::CreateFailError
@menu.save
n
@menu.save
unless @menu.save
MyError::CreateFailError
c
MyError::UpdateFailError @menu.errors.messages.to_s
@menu.update(menu_params)
c
a = @menu.errors.messages.to_s
a = @menu.errors.messages
a
a = @menu.errors
a = @menu.errors.message
a.values.first.first
a.values.first
a.values
a.keys
a.key
a = @menu.errors.messages
@menu.errors.messages
@menu.update(menu_params)
@menu.errors.messages
c
raise UpdateFailError @menu.errors.messages
@menu.update(menu_params)
c
@menu.errors.messages
@menu.update(menu_params)
c
@msg
@message
@status
@error
c
n
shn
c
up
upu
up
n
c
n
klass.name
n
s
n
block
nlock
n
klasses
options
n
options
s
c
Rails.root.join('public', _status.to_s)
s
c
s
c
n
s
c
n
c
n
c
raise Error::CustomError unless @user
clear
c
config.root
c
include MyTestHandler
c
include ErrorsHelper
include Error
c
include ErrorHandler
include lib/Error::ErrorHandler
c
include lib/Error::ErrorHandler
include ErrorHandler
include Error::ErrorHandler
c
@order
c
session[:today_order][(:id).to_s]
session[:today_order][:id]
session[:today_order]
order_id
params[:dish][:dish_id]
@order_dishes
c
@order = Order.where('DATE(date)=?', Date.today).where('user_id = ?', session[:user_id])
Order.where("date LIKE '%#{Date.today}%'")
Order.where("date LIKE '%#{Date.today}'")
Order.where('date LIKE ?', Date.today)
Order.where('date LIKE %?%', Date.today)
Order.where('date LIKE \'%?%\'', Date.today).all
Order.where('date LIKE \'%?%\'', Date.today)
Order.where('date LIKE \'%2017-11-14%\'')
Order.last
Date.today
Order.find_by(date: Date.today)
c
Order.find_by(date: Date.today)
Order.find_by(user_id: 8, date: Date.today)
order_params
@order
n
c
session[:today_order]
c
session[:today_order]
c
o.cal_total_price.to_f
o.cal_total_price
o = Order.last
c
@order.save
n
@today_order
c
User.find_by username: 'ngoc'
Date.today
Order.find_by(user_id: 9).dishes.map(&:name)
Order.find_by(user_id: 9)
User.find session[:user_id]
Order.find_by(user_id: session[:user_id], date: Date.today)
session[:user_id]
@today_order = Order.where('user_id = ? AND date = ?', session[:user_id], Date.today).first
@today_order
n
@menu.restaurants.map(&:name)
@menu.restaurants.map(&:name_
c
session[:today_order]
n
c
@menu.first
@menu.length
@menu
@menu.length
c
save_and_open_page
c
User.find(normal_user.id).admin
User.find(normal_user.id).admin?
click_button 'Update User'
check 'user[admin]'
check 'Is admin?'
(find_field 'user[admin]').value
c
(find_field 'user[admin]').value
find_field 'user[admin]'
save_and_open_page
find(:css, "#user_admin[value='1']")[:value]
find(:css, "#user_admin[value='1']").value
find(:css, "#user_admin[value='1']")
c
quit
session[:user_id].class
session[:user_id]
editted_user_id
c
session[:user_id]
editted_user_id
c
quit
page.current_path
save_and_open_page
c
quit
save_and_open_page
click_button 'Update User'
page.find_field( 'user[password]').value
page.find_field( 'user[password]').text
page.find_field 'user[password]'
page.find_field 'user[password]
fill_in 'Password', with: new_pass
quit
dish_2_1
n%3 + 1
