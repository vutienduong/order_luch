c
Dish.last
c
d.image_logo.url
d.image_logo
d = Dish.last
frame
d.restaurant
d = Dish.find 250
adish.errors.messages
adish.valid?
adish
n
adish.image_logo
adish.errors.messages
adish.valid?
adish
n
Dish.last
n
dish
s
c
@dishes
n
c
@dishes
n
c
n
c
n
c
a['thumb']
a['another_info']
n
c
a['another_info']
a['thumb']
n
c
a['another_info']
a['thumb']
n
c
a['thumb']
a
c
n
c
full_url
c
n
c
a
n
c
a
c
thumb './/'
thumb 'css=img'
thumb 'css=.img'
thumb 'img'
thumb 'css=.img-box'
thumb xpath: "//img"
thumb xpath: "//img/@src"
thumb xpath: ".//img/@href"
thumb xpath: ".//img/@src"
thumb xpath: ".//img/@ng-src"
n
c
a['dishes']
n
c
a['dishes']
@dishesa
@dishes
n
c
URI(res_url).host.eql? FOODY_HOST
c
URI(res_url).host.eql? FOODY_HOST
URI(res_url).host.equal? FOODY_HOST
c
URI(res_url).host.equal? FOODY_HOST
FOODY_HOST
URI(res_url).host
c
@restaurant.ref_link.blank?
@restaurant.ref_link
c
params
c
params
c
params
c
params
scrap_params
c
url
path
base_url 1
base_url 0
base_url
url
c
a['dishes']
c
a['dishes']
c
a['dishes']
c
a['dishes']
c
a['dish']
a
c
a
c
a
c
a
c
a
c
Wombat.crawl
repositories
c
a['another_info'].class
a['some_data']
a
a[:another_info]
a[:some_data]
a[:some_date]
c
a
c
some_data
some_date
c
e.class
e.clas
e
c
explore xpath: '/html/body/header/div/div/nav[1]/a[4]'
e
n
links
c
rs + [['', '', 'TOTAL COST', @presenter[:total_cost].to_s]] + [['', '', 'BUDGET', @presenter[:budget].to_s]]
rs + [['', '', 'TOTAL COST', @presenter[:total_cost].to_s]]
rs
c
content
c
a
c
rs
c
e[1]
e[0]
e.length
e
c
dish.restaurant.name
dish.restaurant
dish.restaurany
count
dish.class
dish.length
count
dish
c
@presenter
@today_orders
@menu
c
order.date.to_date
order.date.class
order.date.date
order.date
c
row(0)
row
c
session[:today_order_id]
session[:user_id]
c
dish_params
@dish
c
restaurant
image_size
c
image_size
restaurant
c
@restaurant = Restaurant.new(restaurant_params)
c
Restaurant.new(restaurant_params)
restaurant_params
c
n
c
n
c
UserHelper::test_helper
test_helper
n
c
MyError::CreateFailError.new @menu.errors.messages.to_s
MyError::CreateFailError
MyError::CreateFailError @menu.errors.messages.to_s
@menu.errors.messages.to_s
@menu.save
c
super(:create_fail, 422, msg)
c
raise MyError::CreateFailError
@menu.save
n
@menu.save
unless @menu.save
MyError::CreateFailError
c
MyError::UpdateFailError @menu.errors.messages.to_s
@menu.update(menu_params)
c
a = @menu.errors.messages.to_s
a = @menu.errors.messages
a
a = @menu.errors
a = @menu.errors.message
a.values.first.first
a.values.first
a.values
a.keys
a.key
a = @menu.errors.messages
@menu.errors.messages
@menu.update(menu_params)
@menu.errors.messages
c
raise UpdateFailError @menu.errors.messages
@menu.update(menu_params)
c
@menu.errors.messages
@menu.update(menu_params)
c
@msg
@message
@status
@error
c
n
