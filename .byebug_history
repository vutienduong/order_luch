c
result
n
data
n
c
n
key_arr
arr2
arr1
c
exception
n
c
s
c
CreateMultiDishesService.instance_methods
self.instance_method
self.instance_methods
@names
self.names
names
c
self.names
self.name
@names
names
NAMES
c
self.names
names
self.prices
@prices
prices
c
names
n
service
n
prices
names
n
c
names
data
n
c
n
date
n
c
date
@result
n
date
n
c
params
date
n
c
params
date
n
c
exception
n
provider_id
n
nn
n
params
c
params
c
exception
n
c
n
c
n
dish_names.length
prices.length
n
prices
dish_names
n
c
prices.length
    prices = ExtractLineService.split_line(prices)
prices = params[:provider][:dish_prices]
params[:provider][:dish_prices]
params['dish_prices']
params[:dish_prices]
params
c
n
c
n
@error
c
n
@error
c
daily_restaurants.find_by(date: parse_date)
daily_restaurants.find_by(date: parse_date)&.dishes
n
parse_date.is_a? Date
parse_date
parse_Date
n
date.is_a? Date
n
c
n
parse_date
n
is_provider?
n
date
n
s
n
c
@provider.daily_restaurants.count
n
parse_date
n
c
@dishes
c
Date&.strptime("dadas", "%m/%d/%Y")
Date.strptime("dadas", "%m/%d/%Y")
Date.strptime("", "%m/%d/%Y")
Date.strptime("05/24/2018 8:34 PM", "%m/%d/%Y")
Date.strptime("05/24/2018", "%m/%d/%Y")
Date.strptime("12/22/2011", "%m/%d/%Y")
Date.parse("05-24-2018")
Date.parse("05/24/2018")
DateTime.parse(date, '%D/%M/%Y')
DateTime.parse(date)
date
n
c
exception
n
c
params
date
n
c
exception
n
params
date
n
c
admin_quick_add_with_type_path.split('/').last
admin_quick_add_with_type_path.class
admin_quick_add_with_type_path
import_page_admin_dishes_path
request.env['PATH_INFO']
request.env['REQUEST_PATH']
request.env['REQUEST_METHOD']
request.env['REMOTE_ADDR']
request.env['QUERY_STRING']
request.env['GATEWAY_INTERFACE']
request.env['REQUEST_URI']
request.env['URI']
request.env.keys
request.env
current_path
request.env['PATH_INFO'].include? 'sap_page'
request.env['PATH_INFO']
current_page?
current_page
c
@r_tags
n
@menu.is_lock?
select_date < Date.today
c
params
c
params
c
params
c
wed_res
wed_res[idx - 1]
n
at_date.wday
at_date
c
date
n
c
n
wday_res
n
restaurants.find_by(name: "#{prefix}_Monday")
prefix
prefi
restaurants
c
params
c
params
c
params
c
n
c
prefix
n
c
@result
c
'abc'.gsub!('a', '1')
@notice
@notice.content = @notice.content.gsub('\r\n', 'aa')
@notice.content
@notice
c
notice_params
params
c
p_dishes.last[:name]
p_dishes.last
params
p_dishes
c
params[:provider]['1']
params[:provider][:1]
params[:provider][1]
params
c
Restaurant.last
prefix
@error
@fake_provider_names
c
@fake_provider_names
@fake_provider_name
c
params[:date][:month]
params
year
month
c
params
c
params
c
@current_stt
c
